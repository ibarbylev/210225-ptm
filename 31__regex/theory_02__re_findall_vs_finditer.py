import re

TEXT = """ 111 22 33-aad 232-15-11 ff 15 
15 555-22-78 223/99-37 223/25/987 123-35 26 258-85-45 
"""

pattern = r'\d{3}-\d{2}-\d{2}|\d{3}\/\d{2}\/\d{2}|\d{3} \d{2} \d{2}'

"""С применением регулярных выражений в конкретный методах, 
нужно быть очень внимательными - у каждого метода могут быть
свои особенности.
(То, что сработал в regex101 - не факт, что сработает в конкретном методе!)

findall() - отлично работает с паттернами без группировки
"""

pattern_without_group = r'\d{3}-\d{2}-\d{2}|\d{3}\/\d{2}\/\d{2}|\d{3} \d{2} \d{2}'
result = re.findall(pattern_without_group, TEXT)
print(result)
# ['111 22 33', '232-15-11', '555-22-78', '223/25/98', '258-85-45']

"""
Однако, добавление группировки всё сводит на нет:
"""
pattern_group = r'\d{3}(-| |\/)\d{2}\1\d{2}'

result = re.findall(pattern_group, TEXT)
print(result)
# [' ', '-', '-', '/', '-']

"""
Решение 1:
Окружить результат ещё одной группировкой.
(ОБРАТИТЕ ВНИМАНИЕ: 
    - теперь группировка разделителей становится по счёту второй
    - дополнительно ещё придётся обрабатывать и tuple группировок)
"""

pattern_double_group = r'(\d{3}(-| |\/)\d{2}\2\d{2})'

intermediate_result = re.findall(pattern_double_group, TEXT)
print(intermediate_result)
# [('111 22 33', ' '), ('232-15-11', '-'), ('555-22-78', '-'), ('223/25/98', '/'), ('258-85-45', '-')]

result = [x[0] for x in intermediate_result]
print(result)
# ['111 22 33', '232-15-11', '555-22-78', '223/25/98', '258-85-45']

"""
Решение 2:
Для группировок использовать более сложный метод finditer()
"""

for item in re.finditer(pattern, TEXT):
    print(item)

result = [match.group(0) for match in re.finditer(pattern, TEXT)]
print(result)
# ['111 22 33', '232-15-11', '555-22-78', '223/25/98', '258-85-45']
